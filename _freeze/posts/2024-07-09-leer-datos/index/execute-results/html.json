{
  "hash": "2f85c919a8cc09147760bcd679067189",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Acceso a Datos\"\nauthor: \"Miguel Equihua\"\ndate: 9/jul/2024\n\nlang: es\ncategories: [datos, datos abiertos, API]\n\nimage: magnifying-glass-541626_1280.jpg\n\nlightbox: true\n---\n\n\n\n\n## Obtención de Datos\n\nLas fuentes de datos, especialmente hoy, pueden ser muy variadas. Desde los datos que conseguimos directamente en campo a partir de mediciones directas o encuestas, hasta los datos que podemos obtener de _fuentes de datos abiertos_. Considero que será de tu interés explorar las distintas formas de interacción que las fuentes de datos implican para nuestros procesos de producción _científica reproducible_.\n\n### Manejo de claves confidenciales\n\nUn tema importante a cuidar es preservar la confidencialidad de claves, **tokens** y otras formas de identificación personal que puede implicar el proceso de acceso a datos en línea. Así que veremos eso como primer asunto. Queda claro que debemos evitar por todos los medios evitar poner esa información en carpetas o código que pueden acabar siendo registradas en Github en nuestro repositorio público. Haberte vacunado con `usethis::git_vaccinate()` ayuda en gran medida, pero desde luego no es remplazo a estar atentos a lo que estamos haciendo. La estrategia de registro de datos confidenciales que te propongo es la biblioteca `keyring`. Esta biblioteca accede al sistema de almacenamiento de credenciales de tu máquina desde _R_. La describen como una **API** _Independiente de la Plataforma_ para acceder al depósito de credenciales del sistema operativo de tu máquina. [Este sitio explica que es una API (Application Programming Interface)](https://aws.amazon.com/es/what-is/api/). Actualmente `keyring` soporta:  **Keychain** en _macOS_, **Credential Store** wn _Windows_, **the Secret Service API** en _Linux_, soluciones simples (sin plataforma específica) desarrollados con variables de sistema o archivos encristalados e incluso ofrece la posibilidad de desarrollar algunas soluciones propias con sencillez. En nuestro caso, básicamente usaremos dos funciones de esta biblioteca. Primero y desde la pantalla de **Consola** ejecuta:\n\\\n\n```r\nkey_set(service = \"[dale un nombre]\", username = \"[el que desees]\")\n```\n\\\n\nEsto hará el registro de tus credenciales en tu máquina, fuera de la vista. A partir de ese momento y mientras no elimines el registro explícitamente, estarán disponibles los datos que hayas registrado y los podrás obtener con: \n\\\n\n```r\nkey_ger(service = \"[dale un nombre]\", username = \"[el que desees]\")\n\n```\n\\\n\nEsta última línea recupera los datos confidenciales, así que deberás cuidar usar las credenciales de inmediato y procurar no guardarlas y menos desplegarlas o habilitar medios para mostrarlas, durante el proceso.\n\nVeamos un primer ejemplo con **INEGI**. Te sugiero ir a [https://www.inegi.org.mx/servicios/api_indicadores.html](https://www.inegi.org.mx/servicios/api_indicadores.html), en donde **INEGI** nos muestra un ejemplo de como acceder a los datos abiertos que _compilan_, _mantienen_ y _custodian_. Deberás obtener un **token** personal, el mismo sitio de **INEGI** te dirá como obtenerlo. El ejemplo muestra como obtener datos de la **serie histórica** del indicador de la **Población total** de los Estados Unidos Mexicanos, en idioma español, en formato _JSON_. Una vez que los obtengamos mostraremos los datos en tablas y gráficas.\n\nLo primero que haremos es preparar el acceso a los datos con el **token** confidencial y obtenemos los datos, sin haber registrado la _URL_ de acceso, pues como viste arriba, incluye tu **token**, así que habrá que manejarla con seguridad. El resultado de este _código_ es una estruuctra de datos que ya no contiene información confidencial.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(rjson)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rjson'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:jsonlite':\n\n    fromJSON, toJSON\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(keyring)\nlibrary(stringr)\nlibrary(flextable)\n\nsuppressWarnings(suppressMessages(library(tidyverse)))\n\n# Llamado al API de INEGI\nurl <-\"https://www.inegi.org.mx/app/api/indicadores/desarrolladores/jsonxml/INDICATOR/1002000001/es/00000/false/BISE/2.0/[Aquí va tu Token]?type=json\"\n\n# Obtiene los datos (usa los datos confidenciales sin mostrarlos ni guardarlos)\ndatosGenerales <- content(GET(str_replace(url,\n                                          \"\\\\[Aquí va tu Token\\\\]\",\n                                          key_get(service = \"inegi_api\",\n                                                  username = \"miguel_inegi\")))\n                          , \"text\")\n```\n:::\n\n\n\n\n\nLa siguiente tarea que haremos ahora es simplemente arreglar los datos y ponerlos de la manera que requiero. Los datos son actualmente una base de datos _JSON_, que es una estructura parecida a un diccionario jerárquico, que tiene una etiqueta seguida de los datos que le corresponden. Aquí te muestro un fragmento de los datos de **INEGI** que obtuvimos. Es la sección etiquetada como _Header_. Podemos ver que esta etiqueta tiene como contenido los datos _Name_ y _email_, a su vez con sus respectivos datos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndescrip <- fromJSON(datosGenerales[[1]])$Header\nprettify(toJSON(descrip))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{\n    \"Name\": \"Datos compactos BISE\",\n    \"Email\": \"atencion.usuarios@inegi.org.mx\"\n}\n \n```\n\n\n:::\n:::\n\n\n\n\n\\\n\nAhora haremos algunas operaciones para arreglar los datos del _JSON_ en una tabla de tipo _data.frame_ (_tibble_ si optamos por una variante actual) en _R_. Los datos que nos interesan son los que están en la etiqueta _Series_ y dentro de estas _Series_ están las listas de _OBSERVATIONS_, que en este caso son 15.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# junta todo en un gran texto corrido\nflujoDatos <- paste(datosGenerales, collapse = \" \") \n\n# Obtiene la lista de observaciones \nflujoDatos <- fromJSON(flujoDatos) # Convierte al JSON a una lista de R\nflujoDatos <- flujoDatos$Series # Toma la sublista Series \nflujoDatos <- flujoDatos[[1]][\"OBSERVATIONS\"]\n\ncat(\"\\nNúmero de observaciones: \", length(flujoDatos[[1]]),\n    \"\\n\\nDatos en cada observación:\\n\",\n    paste(\"   \", names(flujoDatos[[1]][[1]]), collapse = \"\\n\"), sep = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nNúmero de observaciones: 15\n\nDatos en cada observación:\n    TIME_PERIOD\n    OBS_VALUE\n    OBS_EXCEPTION\n    OBS_STATUS\n    OBS_SOURCE\n    OBS_NOTE\n    COBER_GEO\n```\n\n\n:::\n:::\n\n\n\n\nAhora convierto lista de listas en un tabla con los datos de población y año de censado.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- flujoDatos[[1]] %>% \n      sapply(., c) %>% \n      t() %>% \n      as_tibble() %>% \n      select(TIME_PERIOD, OBS_VALUE) %>% \n      mutate(TIME_PERIOD = as.integer(TIME_PERIOD),\n             OBS_VALUE = as.integer(OBS_VALUE))\n\n\ndf1 %>% flextable() %>% \n        colformat_int(j = 1, big.mark = \"\") %>% \n        set_header_labels(TIME_PERIOD = \"Año\", OBS_VALUE = \"Población\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-58d6f9e6{}.cl-58c3ef86{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-58cb2260{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-58cb5230{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-58cb523a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-58cb5244{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-58d6f9e6'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-58cb5230\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">Año</span></p></th><th class=\"cl-58cb5230\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">Población</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1910</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">15,160,369</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1921</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">14,334,780</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1930</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">16,552,722</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1940</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">19,653,552</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1950</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">25,791,017</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1960</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">34,923,129</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1970</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">48,225,238</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1980</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">66,846,833</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1990</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">81,249,645</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">1995</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">91,158,290</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">2000</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">97,483,412</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">2005</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">103,263,388</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">2010</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">112,336,538</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">2015</span></p></td><td class=\"cl-58cb523a\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">119,938,473</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-58cb5244\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">2020</span></p></td><td class=\"cl-58cb5244\"><p class=\"cl-58cb2260\"><span class=\"cl-58c3ef86\">126,014,024</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\nAhora podemos ver los datos como una gráfica\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1, type = \"b\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nAhora con la biblioteca `ggplot2`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(df1, aes(x = TIME_PERIOD, y = OBS_VALUE / 1000000)) +\n  geom_point(color = \"red\", size = 3, show.legend = FALSE) +\n  geom_line(color = \"blue\", show.legend = FALSE) +\n  ylab(\"Población (millones de habitantes)\") +\n  xlab(\"Año\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}