---
title: "Referencias Cruzadas en Quarto"
author: "Miguel Equihua"
date: 04/jul/2024

image: img/ai-generated-8334581_1280.png

lang: es
categories: [formato, referencias]

number-sections: true

toc: true

lightbox: true

code-fold: true

prefer-html: true

---


No me gustó la configuración *default* que usa *Quarto*, de justificar a la izquierda las leyendas de las figuras. Para cambiar eso use el código del @lst-css. Esto tiene un poco que ver con el asunto de darle en general un *tema/aspecto* al proyecto. [Aquí puedes encontrar más información](https://quarto.org/docs/output-formats/html-themes.html) al respecto.

::: {#lst-css lst-cap="Código css para centrar la leyenda."}
```{css}

figcaption {
    text-align: center;
}

```
:::

## Identificadores fijos

*Quarto* tiene prevista toda una colección de identificadores para reconocer los distintos tipos de componentes que pueden requerir alguna forma de llamada en el texto. Claramente es el caso de **figuras** y **tablas**. Pero *Quarto* tiene además toda una gama de componentes que son susceptibles de *referencia cruzada*. Los anoto en el @tbl-prefijos. Algunos de ellos corresponden con *bloques de llamada* (**callouts**), que desde luego también puede ser interesante referir en otras partes del texto y que podrían tener contenido distinto al sugerido por el bloque. Por ejemplo, dentro de un bloque *tip*, podría ponerse una definición a la que se hace referencia en otra parte del texto. Además, podrías definir tu propio prefijo para llevar control de alguna clase de componente de t interés. Puedes encontrar [más al respecto en la documentación de Quarto](https://quarto.org/docs/reference/metadata/crossref.html). 

\
\

| Prefijo    | Componente        |
|------------|-------------------|
| {tu clave} | {tus términos}    |
| cau        | precaución        |
| cnj        | conjetura         |
| cor        | corolario         |
| def        | definición        |
| eq         | ecuación          |
| exm        | ejemplo           |
| exr        | ejercicio         |
| fig        | figura            |
| imp        | importante        |
| lem        | lema              |
| lst        | código de cómputo |
| nte        | notas             |
| prp        | proposición       |
| rem        | observación       |
| sec        | sección           |
| sol        | solución          |
| tbl        | cuadro            |
| thm        | teorema           |
| tip        | sugerencia        |
| wrn        | advertencia       |
: Lista de prefijos previstos en *Quarto* {#tbl-prefijos}

\

Me preguntabas sobre como incluir la definición de algo de interés (@def-definir). Está es la manera.

\

**\:\:\: \{\#def-definir\}**\
**Definición de algo importante**\
**\:\:\:**\

\

-------------

::: {#def-definir}
Definición de algo importante
:::

------------

\
\

Puede ser que interese hacer referencia a un poco de código computacional que es importante en la explicación de tus hallazgos científicos o tecnológicos. Por ejemplo, el @lst-cod-1 es el que use para producir la @fig-sun-burst. Se trata de una ilustración de la taxonomía de características de *sabor* que pueden apreciarse en una taza de café. La gráfica de la izquierda son datos un poco resumidos y los de la derecha una lista llamada *completa*. La presentación permite comparar ambos conjuntos de datos.

::: {#lst-cod-1 lst-cap="Código para producir una gráfica bonita."}
```{r}
#| warning: false
#| code-overflow: wrap

library(plotly, warn.conflicts = FALSE, quietly = TRUE, mask.ok = TRUE)

d1 <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/coffee-flavors.csv')
d2 <- read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')
fig <- plot_ly() 
fig <- fig %>%
  add_trace(
    ids = d1$ids,
    labels = d1$labels,
    parents = d1$parents,
    type = 'sunburst',
    maxdepth = 2,
    domain = list(column = 0)
    ) 
fig <- fig %>%
  add_trace(
    ids = d2$ids,
    labels = d2$labels,
    parents = d2$parents,
    type = 'sunburst',
    maxdepth = 3,
    domain = list(column = 1)
  ) 
fig <- fig %>%
  layout(autosize=F, width = 700, height = 450, 
         grid = list(columns =2, rows = 1),
         margin = list(l = 0, r = 0, b = 0, t = 0),
         sunburstcolorway = c("#636efa","#EF553B","#00cc96",
                              "#ab63fa","#19d3f3","#e763fa",
                              "#FECB52","#FFA15A","#FF6692",
                              "#B6E880"),
      extendsunburstcolors = TRUE)
```
:::

::: {layout="[-1,5,-1]"}
```{r}
#| label: fig-sun-burst
#| fig-cap: Gráfica dinámica bonita con biblioteca Plotly
#| warning: false
#| out-width: 8in
#| out-height: 5in
#| echo: false

fig
```
:::

