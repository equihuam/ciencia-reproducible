{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Pull request o ¡Acepta mi contribución!\"\n",
        "author:\n",
        "  - name: [Miguel Equihua]\n",
        "    url: https://www.ie-gamma.net\n",
        "date: 6/jul/2024\n",
        "\n",
        "categories: [github, colaboración, fork, copiar repo, usethis]\n",
        "\n",
        "image: img/Pull-Request.png\n",
        "\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "editor_options: \n",
        "  chunk_output_type: inline\n",
        "lightbox: true\n",
        "---\n",
        "\n",
        "\n",
        "![](img/Pull-Request.png){width=80%}\n",
        "\n",
        "Un _Pull request_ en _Git_ podríamos llamarlo una _Solicitud de Fusión_, aunque lo común es usar la frase en inglés. Es la base del uso de un repositorio _Git_ como plataforma de colaboración además del control de versiones. Es el mecanismo seguro de solicitar la incorporación de cambios al proyecto. La ideas es tan simple como el nombre indica: se solicita al responsable del proyecto que incorpore una nueva rama (desde un repositorio que tiene cambios propuestos), en otra (del mismo o de otro repositorio).\n",
        "\n",
        "Con las peticiones de fusión puedes:\n",
        "\n",
        "\n",
        "+ Comparar los cambios entre dos ramas\n",
        "+ Revisar y discutir las modificaciones propuestas\n",
        "+ Construir, probar y desplegar el efecto de la modificación en el proyecto.\n",
        "+ Evitar que la adición solicitada se aplique antes de ser adecuadamente revisada.\n",
        "\n",
        "En `usethis` el subconjunto de funciones con el prefijo `pr_` se refieren a las operaciones relacionadas con _pull requests_ en Github. Encontraras [más información en Happy Git](https://happygitwithr.com/).\n",
        "\n",
        "Una solicitud de fusión involucra a dos participantes, los llamaremos: contribuyente y revisor. Como las funciones `pr_` usan la infraestructura interactiva de Github (API) Necesitaras un _token personal de acceso_, lo puedes hacer con este código:\n",
        "\n",
        "\n",
        "``` r\n",
        "usethis::create_github_token() \n",
        "```\n",
        "\n",
        "Al ejecutarlo te llevará a la página adecuada para la tarea en Github con la innformación recomendada ya registrada, sólo falta describir el uso que darás al token y la caducidad que prefieres. Copia el token y registralo en forma segura en _RStudio_\n",
        "\n",
        "``` r\n",
        "gitcreds::gitcreds_set()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Copiar y clonar localmente\n",
        "\n",
        "Para empezar a colaborar, lo primero es que cada participante tenga su propia copia (_fork_) del proyecto. Esto se puede hacer con la instrucción siguiente:\n",
        "\n",
        "\n",
        "``` r\n",
        "usethis::create_from_github(\"equihuam/ciencia-reproducible\", fork = TRUE)\n",
        "\n",
        "```\n",
        "\n",
        "Este comando hará lo siguiente:\n",
        "\n",
        "+ Una copia del repositorio _ciencia-reproducible_ que tengo en mi cuenta personal.\n",
        "+ Clonará la copia del repositorio en tu equipo.\n",
        "+ Definirá el _orígen remoto_ del repositorio vinculado a tu copia en Github.\n",
        "+ También definirá que t copia está vinculada a mi repositorio del mismo nombre.\n",
        "+ Configura el sistema para viggilar lo que ocurra en la rama principal de mi repositorio.\n",
        "+ Abrir una nueva ventana de RStudio con tu copia clonada.\n",
        "+ Algunas opciones adicionales en el comando de `usethis` que podrías querer usar:\n",
        "  + controla si se debe copiar o no `fork = TRUE` o `fork = FALSE`.\n",
        "  + Usa  `destdir` para especifica en donde quieres poner tu clon del repositorio.\n",
        "  + Podrías incluso usar la opción `usethis.destdir` para que los nuevos proyectos siempre vayan a un directorio específico de tu preferencia.\n",
        "  \n",
        "## Crea una rama y propon cambios\n",
        "\n",
        "Para crear tu propuesta de cambio puedes usar la función `pr_init()` que crea una rama nueva en tu repositorio en preparación para hacer la solicitud de incorporación de cambios. Es buena práctica hacerlo así, en lugar de usar la rama principal (comunmente _main_ o _master_). En este caso llamaremos a la rama nueva idea-1\n",
        "\n",
        "``` r\n",
        "usethis::pr_init(branch = \"idea-1\")\n",
        "\n",
        "```\n",
        "\n",
        "La ejecución de este comando crea la rama y la hace el espacio activo de trabajo. Ahora puedes hacer todo el trabajo que gustes, hacer tus _commits_ en esta rama y demás.\n",
        "\n",
        "Cuando estés lista para enviar tu contribución con las adecuaciones y cambios que deseas proponer usa el siguiente comando.\n",
        "\n",
        "``` r\n",
        "usethis::pr_push()\n",
        "\n",
        "```\n",
        "\n",
        "La ejecución del comando hará que se presente un ventana de tu navegador de Internet en la _URL_ (Uniform Resource Locator) de interés. En la ventana podrás ver una comparación de lo que hay en el repositorio original (izquierda) y los cambios que propones (derecha). También verás un gran botón verde que dice **Create Pull Request**. Si estás lista, apriétalo para enviar la solicitud a la consideración del responsable. Al apretar el botón tendrás opción de indicar si es un borrador o una propuesta terminada. En el primer caso, no olvides marcarla como lista para ser revisada cuando hayas terminado de trabajarla y la consideres completa, momento en el que habrás de lanzar un nuevo `pr_push()`\n",
        "\n",
        "GitHub enviará un mensaje al responsable, quien revisará tu solicitud. Podrás ver lo que está pasando con la instrucción:\n",
        "\n",
        "``` r\n",
        "usethis::pr_view()\n",
        "\n",
        "```\n",
        "\n",
        "Te llevará a la página adecuada en tu navegador de Internet en donde se está dando segimientto a tu petición. \n",
        "\n",
        "\n",
        "En el proceso de revisión el responsable decidirá en algún momento llevar tu propuesta a su máquina. Lo podrá hacer con la instrucción\n",
        "\n",
        "``` r\n",
        "usethis::pr_fetch()\n",
        "\n",
        "```\n",
        "\n",
        "Al ejecutar este comando se crea una nueva rama en el equipo del responsable con un identificador que incluye el dato del usuario que remite la contribución. Una vez que está satisfecho con el contenido, que pdo haber ajustado según su perspectiva, deberá emitir un nuevo push:\n",
        "\n",
        "``` r\n",
        "usethis::pr_push()\n",
        "\n",
        "```\n",
        "\n",
        "que actualizará los cambios con sus sugerencias. Cuando todo se valora está en orden, el responsable emitirá la orden de incorporar los cambios y dar por terminado el proceso. Lo puede hacer con las siguiente instrucción. \n",
        "\n",
        "``` r\n",
        "usethis::pr_finish()\n",
        "\n",
        "```\n",
        "\n",
        "Para poner tu copia del repositorio al día deberás emitir una penúltima instrucción\n",
        "\n",
        "``` r\n",
        "usethis::pr_pull()\n",
        "\n",
        "```\n",
        "\n",
        "que incorporará la versión final de los cambios en tu copia del repositorio. Finalmente, podrás cerrar el proceso desde tu lado con:\n",
        "\n",
        "``` r\n",
        "usethis::pr_finish()\n",
        "\n",
        "```\n",
        "\n",
        "lo que dará por terminado el proceso.\n",
        "\n",
        "Puedes encontrar [este texto útil](https://usethis.r-lib.org/articles/pr-functions.html) para obtener más información sobbre el tema.\n",
        "\n",
        "\n",
        "## Algunos problemas encontrados\n",
        "\n",
        "1. Un problema que encontramos hoy fue la de operar _RStudio_ fuera del proyecto de interés en forma inadvertida. Te sugiero siempre verificar que estés trabajando con el proyecto que deseas. La indicación la hace claramente _RStudio_ en la equina superior izquierda. No sólo indica ahí el nombre del proyecto, si _Git_ está habilitado, también indica la **rama** en la que estás trabajando. Si lo que se muuestra es solamente **RStudio**, estás fuera de todo proyecto. Ve a **File &rarr; Open Project**  o **File &rarr; Recent Projects** y abre el que deseas sea tu base de trabajo. \n",
        "\n",
        "![](img/Rstudio-proyecto.png)\n",
        "\n",
        "2. Después de hacer el _fork_ con `usethis::create_from_github(\"equihuam/ciencia-reproducible\", fork = TRUE)`, se hizo correctamente la copia,  se  obtuvo un clón del nuevo repositorio, etc. Sin embargo, el acceso al nuevo repositorio apareció inhabilitado (_pull_ y _push_ grises). Es seguro que esto se deba a un problema de configuración del proyecto. My probablemente tenga que ver con los permisos con los que estás operando y eso lo controla el token que tienes registrado. Pudieran ser también algunas otras cosas. Para empezar a explorar el problema lo mejor será usar `git_sitrepo` como sugiere [Matthew Carson](https://forum.posit.co/t/cant-push-git-commit/176827\n",
        "), que además de mostrarte detalles de configuración te sugerirá en dónde puede haber problemas y la forma de buscar solución al problema detectado. \n",
        "3. En el vínculo entre _Github_ y _Netlify_ anotaste la rama de interés para publicar que no es la que querías. La solución es redefinir el repositorio de origen. En la figura te sugiero como acceder a esto. Básicamente la idea es reconstruir el vínculo entre _Github_ y _Netlify_ eligiendo los datos correctos de **rama** y **directorio**.\n",
        "\n",
        "![](img/netlify-repositorios.png)\n",
        "\n",
        "4. Encontramos inconsistencia con la definición de la rama que toma el papel _principal_ (_default_) en tu **repo**. Sugiero resolver esto con el comando `git_default_branch_rename` de la biblioteca `usethis`. Úsalo en la pestaña de consola de RStudio. En el siguiente ejemplo estoy suponiendo que quieres cambiar de _master_ a _main_. También estoy suuponiendo que todo lo que te interesa está actualmente en _main_.\n",
        "\n",
        "```r\n",
        "usethis::git_default_branch_rename(from = \"master\", to =  \"main\")\n",
        "\n",
        "```\n",
        "\n",
        "Una vez hecho esto, podría ocurrir que recordaras que hay cosas en _master_ que quieres tener en _main_. Esto requiere un `git merge`.\n",
        "\n",
        "Para hacer la fusión de _master_ con _main_. No debe haber problema porque _main_ la originaste a partir de _master_. Bajo estas condiciones lo que sigue es lo siguiente en la pestaña **terminal** de _RStudio_:\n",
        "\n",
        "1. Cambia a la **rama** _main_, asegúrate que no tienes trabajo pendiente por registrar con un `commit`.\n",
        "2. Navega en la terminal hasta asegurarte que estás en el directorio de tu proyecto.\n",
        "\n",
        "```bash\n",
        "cd \"c:\\[anota acquí la ruta a tu proyecto]\"\n",
        "\n",
        "```\n",
        "\n",
        "3. Ubicada en tu directorio de interés invoca el siguiente comando de `git`\n",
        "\n",
        "```bash\n",
        "git merge master\n",
        "\n",
        "```\n",
        "\n",
        "Ahora _master_ y _main_ hacen referencia al mismo estado del proyecto, por lo tanto uno de los dos sobra. En este caso, puede convenir borrar _master_. Lo puuedes hacer con el comando siguiente en la pestaña **terminal* y desde el directorio de tu proyecto.\n",
        "\n",
        "\n",
        "```{bash}\n",
        "git branch -d master\n",
        "```\n",
        "\n",
        "\n",
        "Si resultara que la **rama** en cuestión, en realidad no es redundante, _git_ te lo hará saber. Podrías obligar a _git_ a eliminar _master_ de cualquier manera, sólo cambia \"-d\" por \"-D\", pero hazlo con mucho cuidado, pues podrías perder algo que vas a echar de menos más adelante. [Eric C. Anderson](https://eriqande.github.io/rep-res-web/lectures/git-branch-and-merge.html) preparó esta explicación del tema, podría ser de tú interés.\n"
      ],
      "id": "ebadb2ca"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}